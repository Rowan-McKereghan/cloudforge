// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//switch database url to env

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Material {
  id           String  @id @default(uuid())
  name         String
  length       Float
  lengthUnits  String
  width        Float
  widthUnits   String
  thickness    Float
  thicknessUnits    String
  grade        String
  defaultPrice Float
  priceUnits   String
  inventory    Inventory?
  quoteItems     QuoteItem[]      
}

model PurchaseHistory {
  id         String   @id @default(uuid())
  inventoryId String
  inventory  Inventory @relation(fields: [inventoryId], references: [id])
  quantity   Float
  vendor     String?
  date       DateTime @default(now())
}

model Inventory {
  id         String          @id @default(uuid())
  materialId String          @unique
  material   Material        @relation(fields: [materialId], references: [id])
  onHand     Float           @default(0)
  allocated  Float           @default(0)
  purchases  PurchaseHistory[]
}

model Quote {
  id          String      @id @default(uuid())
  customerName String
  items       QuoteItem[]
  status      QuoteStatus @default(DRAFT)
  total       Float
  createdAt   DateTime    @default(now())
  salesOrder  SalesOrder?
}

model SalesOrder {
  id       String  @id @default(uuid())
  quote    Quote   @relation(fields: [quoteId], references: [id])
  quoteId  String  @unique
  customerName String
  shipments Shipment[]
  invoice  Invoice?
}

model Shipment {
  id           String         @id @default(uuid())
  salesOrder   SalesOrder     @relation(fields: [salesOrderId], references: [id])
  salesOrderId String
  carrier      String
  tracking     String?
  dispatchedAt DateTime       @default(now())
  estimatedDelivery  DateTime @default(now())
  status       ShipmentStatus @default(DISPATCHED)
  invoice      Invoice?       @relation(fields: [invoiceId], references: [id])
  invoiceId    String?
}

model Invoice {
  id           String        @id @default(uuid())
  salesOrder   SalesOrder    @relation(fields: [salesOrderId], references: [id])
  salesOrderId String        @unique
  number       String        @unique
  issuedAt     DateTime      @default(now())
  dueDate      DateTime
  subtotal     Float
  taxRate      Float         @default(0.0)
  discount     Float         @default(0.0)
  total        Float
  status       InvoiceStatus @default(ISSUED)
  payments     Payment[]
  shipments    Shipment[]
}

model QuoteItem {
  id          String   @id @default(uuid())
  quote       Quote    @relation(fields: [quoteId], references: [id])
  quoteId     String
  material    Material @relation(fields: [materialId], references: [id])
  materialId  String
  quantity    Float
  price       Float    // Allows price overrides
  notes       String?
}

enum QuoteStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
}

enum ShipmentStatus {
  PREPARING
  DISPATCHED
  IN_TRANSIT
  DELIVERED
  DELAYED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PARTIALLY_PAID
  PAID
  OVERDUE
  VOID
}

model Payment {
  id         String   @id @default(uuid())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  amount     Float
  method     PaymentMethod @default(WIRE)
  reference  String?
  paidAt     DateTime @default(now())
}

enum PaymentMethod {
  CASH
  CHECK
  WIRE
  CREDIT_CARD
}